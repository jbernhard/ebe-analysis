#!/usr/bin/env python3


import argparse
import fileinput
import sys

from lib import event


parser = argparse.ArgumentParser(description='''Calculate flow coefficients v_n
        from standard particle info.  Default output format: v_min ... v_max.''')
parser.add_argument('files', nargs='*',
        help="Files to read.  Omit or use '-' to read from stdin.")
parser.add_argument('--vn', type=int, nargs=2, metavar=('min','max'), default=[2,6],
        help="Range of v_n to calculate [two arguments].  Default is 2 6.")
parser.add_argument('--vectors', action='store_true',
        help='Output flow vector components instead of magnitudes: v_min_x \
        v_min_y ... v_max_x v_max_y')
parser.add_argument('--avg', action='store_true',
        help='Also calculate average flows and print to _stderr_.')
parser.add_argument('--diff', nargs='?',
        metavar='width', type=float, const=0.1, default=0,
        help='''Calculate average differential flows instead of event-by-event
        flows.  The optional argument `width' sets the pT bin width in GeV,
        default 0.1.  Output format:  pT_mid N_particles v_min ... v_max, where
        pT_mid is the middle pT value of the bin.''')
args = parser.parse_args()


vnmin,vnmax = args.vn


def main():
    with fileinput.input(files=args.files,openhook=fileinput.hook_compressed) as f:
        events = event.frominput(f)

        if args.diff:
            for pT,e in event.combinedevent(events).pTsubevents3(args.diff):
                print(pT,len(e),e.flows(vnmin,vnmax,printvectors=args.vectors))

        else:
            if args.avg:
                _events = []

            for e in events:
                print(e.flows(vnmin,vnmax,printvectors=args.vectors))

                if args.avg:
                    _events.append(e)

            if args.avg:
                print(event.combinedevent(_events).flows(
                    vnmin,vnmax,printvectors=args.vectors), file=sys.stderr)



if __name__ == "__main__":
    main()
