#!/usr/bin/env python3


from lib.parse import EbEParser
from lib.ebeinput import events_from_files
from lib.flows import Flows


def main():
    parser = EbEParser(description='''Calculate flow coefficients v_n from
        standard particle info.  Default output format: v_min ... v_max.''')

    parser.add_argument('-n', '--vn', type=int, nargs=2,
        metavar=('min','max'), default=[2,6],
        help='Range of v_n to calculate [two args].  Default: 2 6.')
    parser.add_argument('-v', '--vectors', action='store_true',
        help='''Output flow vector components instead of magnitudes:
        v_min_x v_min_y ... v_max_x v_max_y''')
    #parser.add_argument('--diff', nargs='?',
    #        metavar='width', type=float, const=0.1, default=0,
    #        help='''Calculate average differential flows instead of
    #        event-by-event flows.  The optional argument `width' sets the pT bin
    #        width in GeV, default 0.1.  Output format:  pT_mid N_particles v_min
    #        ... v_max, where pT_mid is the middle pT value of the bin.''')

    args = parser.parse_args()


    # define a simple function to calculate the flows for each event
    # depends on whether vectors or magnitudes were requested
    if args.vectors:
        flows = lambda e: Flows(e, args.vn[0], args.vn[1]).vectorchain()
    else:
        flows = lambda e: Flows(e, args.vn[0], args.vn[1]).magnitudes()


    for e in events_from_files(**vars(args)):
        print(*flows(e))


if __name__ == "__main__":
    main()
