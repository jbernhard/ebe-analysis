#!/usr/bin/env python3


import argparse
import fileinput

from lib import urqmd
from lib.particle import ParticleFilter


parser = argparse.ArgumentParser(description='''Read UrQMD files and output standard
        particle info.  Optionally filter particles with the following arguments.''')
parser.add_argument('files', nargs='*', help='''Files to read.  Omit or use '-'
        to read from stdin.''')
parser.add_argument('--ID', type=int, nargs='+',
        help='Particle IDs, space separated.')
parser.add_argument('--charged', action='store_true',
        help='Shortcut for all charged particles.')
parser.add_argument('--pTmin', type=float, help='pT minimum.')
parser.add_argument('--pTmax', type=float, help='pT maximum.')
parser.add_argument('--etamin', type=float, help='eta minimum; if no etamax, \
        equivalent to etamin < |eta|.')
parser.add_argument('--etamax', type=float, help='eta maximum; if no etamin, \
        equivalent to |eta| < etamax.')
args = parser.parse_args()


# convert the args Namespace to a dictionary
argdict = vars(args)

# pop the list of files
# argdict now holds only the particle filtering options
files = argdict.pop('files')


def main():
    with fileinput.input(files=files,openhook=fileinput.hook_compressed) as f:

        # init. the urqmd particle generator
        particles = urqmd.particles(f)

        # handle particles differently with filtering
        if any(argdict.values()):
            # there is at least one of the filtering option
            # define a filter function
            pf = ParticleFilter(**argdict)

            for p in particles:
                # output this particle if it passes the filter
                if p:
                    if pf(p):
                        print(p)
                else:
                    # blank line to separate events
                    print()

        else:
            # no filtering options
            # output all particles with blank lines to separate events
            for p in particles:
                print(p or '')


if __name__ == "__main__":
    main()
