#!/usr/bin/env python3


import argparse
import itertools
import sys

from lib.parse import intlist
from lib import stats


def main():
    parser = argparse.ArgumentParser(description='''Find MLE distribution
    parameters.  Output format:  '*shapes loc scale', for each column.''')

    parser.add_argument('-o','--output', default='-', metavar='format',
            help='''Output file format.  Omit or use '-' to write to stdout.  If
            not stdout, output files will be created for each input file.  The
            pattern '{name}' will be replaced by the basename of the input
            file.''')
    parser.add_argument('-c','--cols', type=intlist, default=None,
            help='''Columns to fit, comma separated.  Count from 0.
            Default: all.''')
    parser.add_argument('-k','--ks', type=float, nargs='+',
            help='''Perform KS test instead of parameter fit.  Must provide
            correct number of dist. parameters:  *shapes, loc, scale.  Output:
            KS-stat p-value.''')
    
    parser.add_argument('dist',
            help='''Name of scipy.stats distribution to fit.''')
    parser.add_argument('files', nargs='*', default=['-'],
            help='''File[s] to fit.  Multiple files are processed sequentially.
            Omit or use '-' to read from stdin; note that in this case all input
            will be interpreted as a single file.''')

    args = parser.parse_args()


    for f in args.files:
        # detect reading from stdin / files
        if f == '-':
            fname = sys.stdin
            basename = 'stdin'
        else:
            fname = f
            basename = f.split('.')[0]


        # fit each column
        data = stats.RawData.from_table(fname, dist=args.dist, usecols=args.cols)

        if args.ks is None:
            method = lambda d: d.fit()
        else:
            method = lambda d: d.ks(*args.ks)

        params = itertools.chain.from_iterable(map(method, data))


        # write results to stdout
        if args.output == '-':
            print(*params)

        # write results to files
        else:
            outfname = args.output.format(name=basename)
            print(f,'->',outfname)

            with open(outfname, 'w') as outfile:
                print(*params, file=outfile)


if __name__ == "__main__":
    main()
